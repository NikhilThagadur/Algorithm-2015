package WeekendSpecial;

import java.util.Arrays;

public class WellFormedStrings {

	 // A string "aBIY" is said to be a well-ordered word as each of the letters
	// are in sequential manner regardless of case. So, "AbLe" is not a
	// well-ordered word.
	// You are a anti-hacker. you have a number of character sequences. Your
	// task is to generate all possible well-ordered word that can be generated by those numbers of given character sequences.
	
//	Logic:
//		1. Get the input sequence
//		2. Draw combinations of the sequence
//		3. Permute each sequence
//		4. Check if the sequence is Well Ordered and output.
	 char [] A;
	public  void wellFormedString(String S){
		A = S.toCharArray();
		permutation(A, 0);
	}
	public  void permutation(char [] A, int left){
		if(left==A.length){
			if(isWellFormed(A)){
				System.out.println(Arrays.toString(A));
			}			
			return;
		}
		for(int i=left;i<A.length;i++){
			swap(i,left);
			permutation(A, left+1);
			swap(i,left);
		}
	}	
	public void swap(int a, int b){
		char temp = A[a];
		A[a]=A[b];
		A[b] = temp;
	}
	public boolean isWellFormed(char [] A){
		boolean wellFormed = true;
		for(int i = 0;i<A.length-1;i++){
			if(Character.toLowerCase(A[i])>Character.toLowerCase(A[i+1])){
				wellFormed = false;
				break;
			}
		}
		return wellFormed;
	}
	public static void main(String[] args) {
		String S = "Interview";
		WellFormedStrings i = new WellFormedStrings();
		i.wellFormedString(S);

	}

}
